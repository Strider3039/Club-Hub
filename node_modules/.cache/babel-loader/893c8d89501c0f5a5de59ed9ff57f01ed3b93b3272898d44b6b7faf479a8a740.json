{"ast":null,"code":"var _jsxFileName = \"/home/strider3039/projects/Club-Hub/src/Login/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./Login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isSignup, setIsSignup] = useState(false);\n  const navigate = useNavigate(); // Hook for navigation\n\n  // Dummy account for testing\n  const dummyUser = {\n    username: \"testuser\",\n    password: \"testpass\"\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Check if username and password match the dummy account\n    if (username === dummyUser.username && password === dummyUser.password) {\n      // Simulate successful login\n      alert(\"Login successful!\");\n      navigate(\"/home\"); // Redirect to Home page (adjust path if needed)\n    } else {\n      alert(\"Invalid username or password.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isSignup ? \"Sign Up\" : \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"inputUsername\",\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"inputPassword\",\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submitButton\",\n        type: \"submit\",\n        children: [\" \", isSignup ? \"Sign Up\" : \"Login\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"signupButton\",\n        onClick: () => setIsSignup(!isSignup),\n        children: isSignup ? \"Already have an account? Login\" : \"Don't have an account? Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_s(Login, \"DW9dGt1IfS3jxaAXaGUaN3tNU1o=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","axios","jsxDEV","_jsxDEV","Login","_s","username","setUsername","password","setPassword","isSignup","setIsSignup","navigate","dummyUser","handleSubmit","e","preventDefault","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["/home/strider3039/projects/Club-Hub/src/Login/Login.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./Login.css\";\n\nfunction Login() {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [isSignup, setIsSignup] = useState(false);\n    const navigate = useNavigate(); // Hook for navigation\n\n    // Dummy account for testing\n    const dummyUser = {\n        username: \"testuser\",\n        password: \"testpass\"\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        // Check if username and password match the dummy account\n        if (username === dummyUser.username && password === dummyUser.password) {\n            // Simulate successful login\n            alert(\"Login successful!\");\n            navigate(\"/home\"); // Redirect to Home page (adjust path if needed)\n        } else {\n            alert(\"Invalid username or password.\");\n        }\n    };\n\n    return (\n        <div className={\"Login\"}>\n            <h2>{isSignup ? \"Sign Up\" : \"Login\"}</h2>\n            <form onSubmit={handleSubmit}>\n                <input\n                    className=\"inputUsername\"\n                    type=\"text\"\n                    placeholder=\"Username\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    required\n                />\n                <input\n                    className=\"inputPassword\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                />\n                <button\n                    className={\"submitButton\"} type=\"submit\"> {isSignup ? \"Sign Up\" : \"Login\"}\n                </button>\n                <button className={\"signupButton\"} onClick={() => setIsSignup(!isSignup)}>\n                    {isSignup ? \"Already have an account? Login\" : \"Don't have an account? Sign Up\"}\n                </button>\n            </form>\n        </div>\n    );\n}\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}